//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Padlock/PadlockControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PadlockControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PadlockControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PadlockControls"",
    ""maps"": [
        {
            ""name"": ""Rotation"",
            ""id"": ""7d33d157-f659-48aa-9db5-0f7502eb022f"",
            ""actions"": [
                {
                    ""name"": ""RotateDown"",
                    ""type"": ""Button"",
                    ""id"": ""4b66013d-9ae2-4232-9e70-df65c914ec54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateUp"",
                    ""type"": ""Button"",
                    ""id"": ""6a165afb-ba33-4ff2-9f8f-623a2a9b6b46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a7aef70d-15e5-4078-9f04-83c6e2204962"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab5afed3-3035-4479-9ee8-ae3e1eeb732a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Rotation
        m_Rotation = asset.FindActionMap("Rotation", throwIfNotFound: true);
        m_Rotation_RotateDown = m_Rotation.FindAction("RotateDown", throwIfNotFound: true);
        m_Rotation_RotateUp = m_Rotation.FindAction("RotateUp", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Rotation
    private readonly InputActionMap m_Rotation;
    private IRotationActions m_RotationActionsCallbackInterface;
    private readonly InputAction m_Rotation_RotateDown;
    private readonly InputAction m_Rotation_RotateUp;
    public struct RotationActions
    {
        private @PadlockControls m_Wrapper;
        public RotationActions(@PadlockControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateDown => m_Wrapper.m_Rotation_RotateDown;
        public InputAction @RotateUp => m_Wrapper.m_Rotation_RotateUp;
        public InputActionMap Get() { return m_Wrapper.m_Rotation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotationActions set) { return set.Get(); }
        public void SetCallbacks(IRotationActions instance)
        {
            if (m_Wrapper.m_RotationActionsCallbackInterface != null)
            {
                @RotateDown.started -= m_Wrapper.m_RotationActionsCallbackInterface.OnRotateDown;
                @RotateDown.performed -= m_Wrapper.m_RotationActionsCallbackInterface.OnRotateDown;
                @RotateDown.canceled -= m_Wrapper.m_RotationActionsCallbackInterface.OnRotateDown;
                @RotateUp.started -= m_Wrapper.m_RotationActionsCallbackInterface.OnRotateUp;
                @RotateUp.performed -= m_Wrapper.m_RotationActionsCallbackInterface.OnRotateUp;
                @RotateUp.canceled -= m_Wrapper.m_RotationActionsCallbackInterface.OnRotateUp;
            }
            m_Wrapper.m_RotationActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RotateDown.started += instance.OnRotateDown;
                @RotateDown.performed += instance.OnRotateDown;
                @RotateDown.canceled += instance.OnRotateDown;
                @RotateUp.started += instance.OnRotateUp;
                @RotateUp.performed += instance.OnRotateUp;
                @RotateUp.canceled += instance.OnRotateUp;
            }
        }
    }
    public RotationActions @Rotation => new RotationActions(this);
    public interface IRotationActions
    {
        void OnRotateDown(InputAction.CallbackContext context);
        void OnRotateUp(InputAction.CallbackContext context);
    }
}
